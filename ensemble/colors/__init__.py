#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import numpy as np
from matplotlib import cm

cga_vga_r = np.concatenate((np.linspace(85 / 255, 1, 129), np.repeat(1, 127)), axis=0)
cga_vga_g = np.concatenate((np.repeat(1, 127), np.linspace(1, 85 / 255, 129)), axis=0)
cga_vga_ba = np.repeat(1, 256)
cga_vga_colors = np.c_[cga_vga_r, cga_vga_g, cga_vga_ba, cga_vga_ba]
cga_vga = cm.colors.ListedColormap(cga_vga_colors)

cga_0_high_r = np.concatenate((np.linspace(85 / 255, 1, 86), np.repeat(1, 170)), axis=0)
cga_0_high_g = np.concatenate((np.repeat(1, 171), np.linspace(1, 85 / 255, 85)), axis=0)
cga_0_high_b = np.repeat(85 / 255, 256)
cga_0_high_a = np.ones(256)
cga_0_high = cm.colors.ListedColormap(
    np.c_[cga_0_high_r, cga_0_high_g, cga_0_high_b, cga_0_high_a]
)


# * containing colors with linear interpolation
# * along the turning points
# * with resolution times distinct values
def get_colormap(colors, turning_points, resolution):
    colormap = np.zeros((resolution, 3))
    turning_points = np.floor(turning_points * (resolution - 1))

    for i, (s, e) in enumerate(sliding_window(turning_points)):
        start, end = int(s), int(e)
        print(i, start, end)

        start_offset = 0
        index_offset = 0
        if i == 0:
            start_offset = 1
        if i > 0:
            index_offset = 1

        r = np.linspace(
            colors[i, 0], colors[i + 1, 0], int(end - start + 1 + start_offset)
        )
        g = np.linspace(
            colors[i, 1], colors[i + 1, 1], int(end - start + 1 + start_offset)
        )
        b = np.linspace(
            colors[i, 2], colors[i + 1, 2], int(end - start + 1 + start_offset)
        )

        if end != turning_points[-1]:
            r = r[0:-1]
            g = g[0:-1]
            b = b[0:-1]
        else:
            r = r[1:]
            g = g[1:]
            b = b[1:]

        colormap[start + index_offset : end + 1, 0] = r
        colormap[start + index_offset : end + 1, 1] = g
        colormap[start + index_offset : end + 1, 2] = b

    return cm.colors.ListedColormap(colormap)


def sliding_window(iterable, size=2):
    i = iter(iterable)
    win = []
    for e in range(0, size):
        win.append(next(i))
    yield win
    for e in i:
        win = win[1:] + [e]
        yield win


turning_points = np.array([0, 0.25, 0.5, 0.75, 1])
cga_palette1_colorlist = np.array(
    [
        [0, 170 / 255, 170 / 255],  # dark cyan
        [85 / 255, 1, 1],  # light cyan
        [170 / 255, 170 / 255, 170 / 255],  # gray
        [1, 85 / 255, 1],  # light magenta
        [170 / 255, 0, 170 / 255],  # dark magenta
    ]
)
cga_basic = get_colormap(cga_palette1_colorlist, turning_points, 32)


cga_high_colors = (
    np.array(
        [
            [85, 255, 255, 255],
            [96, 255, 255, 255],
            [106, 255, 255, 255],
            [117, 255, 255, 255],
            [128, 255, 255, 255],
            [138, 255, 255, 255],
            [149, 255, 255, 255],
            [159, 255, 255, 255],
            [170, 255, 255, 255],
            [181, 255, 255, 255],
            [191, 255, 255, 255],
            [202, 255, 255, 255],
            [213, 255, 255, 255],
            [223, 255, 255, 255],
            [234, 255, 255, 255],
            [244, 255, 255, 255],
            [255, 255, 255, 255],
            [255, 244, 255, 255],
            [255, 234, 255, 255],
            [255, 223, 255, 255],
            [255, 212, 255, 255],
            [255, 202, 255, 255],
            [255, 191, 255, 255],
            [255, 181, 255, 255],
            [255, 170, 255, 255],
            [255, 159, 255, 255],
            [255, 149, 255, 255],
            [255, 138, 255, 255],
            [255, 127, 255, 255],
            [255, 117, 255, 255],
            [255, 106, 255, 255],
            [255, 96, 255, 255],
            [255, 85, 255, 255],
        ]
    )
    / 255
)

# cga_high = cm.colors.ListedColormap(cga_high_colors)

# 'cga_1low': (
#     (170, 170, 0, 255),
#     (170, 170, 11, 255),
#     (170, 170, 21, 255),
#     (170, 170, 32, 255),
#     (170, 170, 43, 255),
#     (170, 170, 53, 255),
#     (170, 170, 64, 255),
#     (170, 170, 74, 255),
#     (170, 170, 85, 255),
#     (170, 170, 96, 255),
#     (170, 170, 106, 255),
#     (170, 170, 117, 255),
#     (170, 170, 128, 255),
#     (170, 170, 138, 255),
#     (170, 170, 149, 255),
#     (170, 170, 159, 255),
#     (170, 170, 170, 255),
#     (170, 159, 170, 255),
#     (170, 149, 170, 255),
#     (170, 138, 170, 255),
#     (170, 127, 170, 255),
#     (170, 117, 170, 255),
#     (170, 106, 170, 255),
#     (170, 96, 170, 255),
#     (170, 85, 170, 255),
#     (170, 74, 170, 255),
#     (170, 64, 170, 255),
#     (170, 53, 170, 255),
#     (170, 42, 170, 255),
#     (170, 32, 170, 255),
#     (170, 21, 170, 255),
#     (170, 11, 170, 255),
#     (170, 0, 170, 255),
# ),

# 'cga_0high': (
#     (85, 85, 255, 255),
#     (85, 96, 255, 255),
#     (85, 106, 255, 255),
#     (85, 117, 255, 255),
#     (85, 128, 255, 255),
#     (85, 138, 255, 255),
#     (85, 149, 255, 255),
#     (85, 159, 255, 255),
#     (85, 170, 255, 255),
#     (85, 181, 255, 255),
#     (85, 191, 255, 255),
#     (85, 202, 255, 255),
#     (85, 213, 255, 255),
#     (85, 223, 255, 255),
#     (85, 234, 255, 255),
#     (85, 244, 255, 255),
#     (85, 255, 255, 255),
#     (85, 255, 244, 255),
#     (85, 255, 234, 255),
#     (85, 255, 223, 255),
#     (85, 255, 212, 255),
#     (85, 255, 202, 255),
#     (85, 255, 191, 255),
#     (85, 255, 181, 255),
#     (85, 255, 170, 255),
#     (85, 255, 159, 255),
#     (85, 255, 149, 255),
#     (85, 255, 138, 255),
#     (85, 255, 127, 255),
#     (85, 255, 117, 255),
#     (85, 255, 106, 255),
#     (85, 255, 96, 255),
#     (85, 255, 85, 255),
# ),

# 'cga_0low': (
#     (0, 170, 0, 255),
#     (0, 1.645000e+02, 11, 255),
#     (0, 1.595000e+02, 21, 255),
#     (0, 154, 32, 255),
#     (0, 1.485000e+02, 43, 255),
#     (0, 1.435000e+02, 53, 255),
#     (0, 138, 64, 255),
#     (0, 133, 74, 255),
#     (0, 1.275000e+02, 85, 255),
#     (0, 122, 96, 255),
#     (0, 117, 106, 255),
#     (0, 1.115000e+02, 117, 255),
#     (0, 106, 128, 255),
#     (0, 101, 138, 255),
#     (0, 9.550000e+01, 149, 255),
#     (0, 9.050000e+01, 159, 255),
#     (0, 85, 170, 255),
#     (0, 7.997487e+01, 170, 255),
#     (0, 7.494975e+01, 170, 255),
#     (0, 6.942211e+01, 170, 255),
#     (0, 6.389447e+01, 170, 255),
#     (0, 5.886935e+01, 170, 255),
#     (0, 5.334171e+01, 170, 255),
#     (0, 4.831658e+01, 170, 255),
#     (0, 4.278894e+01, 170, 255),
#     (0, 3.726131e+01, 170, 255),
#     (0, 3.223618e+01, 170, 255),
#     (0, 2.670854e+01, 170, 255),
#     (0, 2.118090e+01, 170, 255),
#     (0, 1.615578e+01, 170, 255),
#     (0, 1.062814e+01, 170, 255),
#     (0, 5.603015e+00, 170, 255),
#     (0, 7.537688e-02, 170, 255),
# ),

# 'cga_mode5high': (
#     (255, 255, 85, 255),
#     (255, 255, 96, 255),
#     (255, 255, 106, 255),
#     (255, 255, 117, 255),
#     (255, 255, 128, 255),
#     (255, 255, 138, 255),
#     (255, 255, 149, 255),
#     (255, 255, 159, 255),
#     (255, 255, 170, 255),
#     (255, 255, 181, 255),
#     (255, 255, 191, 255),
#     (255, 255, 202, 255),
#     (255, 255, 213, 255),
#     (255, 255, 223, 255),
#     (255, 255, 234, 255),
#     (255, 255, 244, 255),
#     (255, 255, 255, 255),
#     (244, 244, 255, 255),
#     (234, 234, 255, 255),
#     (223, 223, 255, 255),
#     (212, 212, 255, 255),
#     (202, 202, 255, 255),
#     (191, 191, 255, 255),
#     (181, 181, 255, 255),
#     (170, 170, 255, 255),
#     (159, 159, 255, 255),
#     (149, 149, 255, 255),
#     (138, 138, 255, 255),
#     (127, 127, 255, 255),
#     (117, 117, 255, 255),
#     (106, 106, 255, 255),
#     (96, 96, 255, 255),
#     (85, 85, 255, 255),
# ),

# 'cga_mode5low': (
#     (170, 170, 0, 255),
#     (170, 170, 11, 255),
#     (170, 170, 21, 255),
#     (170, 170, 32, 255),
#     (170, 170, 43, 255),
#     (170, 170, 53, 255),
#     (170, 170, 64, 255),
#     (170, 170, 74, 255),
#     (170, 170, 85, 255),
#     (170, 170, 96, 255),
#     (170, 170, 106, 255),
#     (170, 170, 117, 255),
#     (170, 170, 128, 255),
#     (170, 170, 138, 255),
#     (170, 170, 149, 255),
#     (170, 170, 159, 255),
#     (170, 170, 170, 255),
#     (159, 159, 170, 255),
#     (149, 149, 170, 255),
#     (138, 138, 170, 255),
#     (127, 127, 170, 255),
#     (117, 117, 170, 255),
#     (106, 106, 170, 255),
#     (96, 96, 170, 255),
#     (85, 85, 170, 255),
#     (74, 74, 170, 255),
#     (64, 64, 170, 255),
#     (53, 53, 170, 255),
#     (42, 42, 170, 255),
#     (32, 32, 170, 255),
#     (21, 21, 170, 255),
#     (11, 11, 170, 255),
#     (0, 0, 170, 255),
# ),
